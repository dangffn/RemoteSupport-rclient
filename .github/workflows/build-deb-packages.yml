name: Build DEB Packages

on: 
  push:
    tags:
    - 'v*'
    
  # manually run the workflow
  # workflow_dispatch:

jobs:

  build_arm:
    # if: ${{ github.ref == 'refs/heads/master' }}
    # The host should always be linux
    runs-on: ubuntu-20.04
    name: Build on ARM
   
    permissions:
      id-token: write
      contents: read
  
    # arch / distro combinations
    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu20.04
          - arch: armv7
            distro: ubuntu20.04

    steps:
      - uses: actions/checkout@v2.1.0

      - name: Process version of the tag
        id: version
        uses: ncipollo/semantic-version-action@v1

      # - name: Show version
      #   id: showversion
      #   env:
      #     SEMANTIC_VERSION: ${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}.${{ steps.version.outputs.patch }}
      #   run: echo "Version $SEMANTIC_VERSION"

      - uses: uraimo/run-on-arch-action@v2.1.1
        name: Build deb package
        id: build
        env: 
          SEMANTIC_VERSION: ${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}.${{ steps.version.outputs.patch }}
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # mount the artifacts dir in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts" --env SEMANTIC_VERSION=${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}.${{ steps.version.outputs.patch }}

          # The shell to run commands with in the container
          shell: /bin/bash

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            # update and install dependencies
            apt update
            apt install python3 python3-pip -y
            pip3 install pyinstaller 

          # Produce a binary artifact and place it in the mounted volume
          run: |
            # build deb file, passing in the version number from the tag
            chmod +x build.sh
            echo "Executing ./build.sh --version $SEMANTIC_VERSION --output /artifacts/"
            ./build.sh --version "$SEMANTIC_VERSION" --output /artifacts/

      - name: Show the artifact
        # Items placed in /artifacts in the container will be in
        # ${PWD}/artifacts on the host.
        run: |
          echo "Dir ${PWD}/artifacts"
          ls -al "${PWD}/artifacts"


  build_x64:
    # if: ${{ github.ref == 'refs/heads/master' }}
    # The host should always be linux
    runs-on: ubuntu-20.04
    name: Build on x86_64
    
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v2.1.0

      - name: Process version of the tag
        id: version
        uses: ncipollo/semantic-version-action@v1

      - name: Create artifacts directory
        run: |
          # make artifacts directory
          sudo mkdir -p ${PWD}/artifacts
          sudo chmod a+rwx ${PWD}/artifacts
      - name: Create test file

      - name: Install Dependencies
        run: |
          # update and install dependencies
          sudo apt update
          sudo apt install python3 python3-pip -y
          sudo pip3 install pyinstaller 

      - name: Build deb package
        id: build
        env: 
          SEMANTIC_VERSION: ${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}.${{ steps.version.outputs.patch }}
          PYI_STATIC_ZLIB: 1

        # Produce a binary artifact and place it in the mounted volume
        run: |
          # build deb file, passing in the version number from the tag
          SEMANTIC_VERSION=${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}.${{ steps.version.outputs.patch }}
          sudo chmod +x build.sh
          echo "Executing ./build.sh --version $SEMANTIC_VERSION --output ${PWD}/artifacts"
          sudo ./build.sh --version "$SEMANTIC_VERSION" --output "${PWD}/artifacts"

      - name: Show the artifact
        # Items placed in /artifacts in the container will be in
        # ${PWD}/artifacts on the host.
        run: |
          echo "Dir ${PWD}/artifacts"
          sudo ls -al "${PWD}/artifacts"

      - uses: aws-actions/configure-aws-credentials@v1
        name: Configure AWS credentials
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1
          # role-session-name: GithubAction
          role-duration-seconds: 1800

      - name: Copy files to S3 with the AWS CLI
        run: |
          aws s3 sync "${PWD}/artifacts" s3://${{ secrets.AWS_BUCKET }}
